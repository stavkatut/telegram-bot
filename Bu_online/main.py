import os
import logging
from logging.handlers import RotatingFileHandler
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils import AIAccountantCore
from dotenv import load_dotenv
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    file_handler = RotatingFileHandler(
        'bot.log',
        maxBytes=2*1024*1024,  # 2 MB
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

setup_logging()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
accountant = AIAccountantCore()

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"), parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_income = State()
    waiting_doc_data = State()
    waiting_question = State()
    waiting_excel = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üßÆ –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
    kb.add(KeyboardButton("üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"))
    kb.add(KeyboardButton("üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò"))
    kb.add(KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"))
    return kb

def get_tax_types_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–£–°–ù 6%", callback_data="tax_usn6"))
    kb.add(InlineKeyboardButton("–£–°–ù 15%", callback_data="tax_usn15"))
    kb.add(InlineKeyboardButton("–ù–î–§–õ", callback_data="tax_ndfl"))
    return kb

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer(
        "ü§ñ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–ª–æ–≥–∏\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
        reply_markup=get_main_kb()
    )

@dp.message_handler(text="üßÆ –ù–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def tax_start(message: types.Message):
    await Form.waiting_income.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        reply_markup=get_tax_types_kb()
    )

@dp.message_handler(state=Form.waiting_income)
async def process_income(message: types.Message, state: FSMContext):
    try:
        tax_data = accountant.calculate_tax(message.text, "–£–°–ù")
        
        response = (
            f"üìä <b>–ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {tax_data['system']}\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥: {tax_data['income']:,.2f} ‚ÇΩ\n"
            f"‚Ä¢ –°—Ç–∞–≤–∫–∞: {tax_data['rate']*100}%\n"
            f"‚Ä¢ –ù–∞–ª–æ–≥ –∫ —É–ø–ª–∞—Ç–µ: {tax_data['tax']:,.2f} ‚ÇΩ\n\n"
            f"‚è∞ –°—Ä–æ–∫ —É–ø–ª–∞—Ç—ã: {tax_data['deadline']}\n"
            f"üìù –§–æ—Ä–º—ã: {', '.join(tax_data['forms'])}"
        )
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('tax_'))
async def process_tax_type(callback: types.CallbackQuery):
    tax_type = callback.data.split('_')[1]
    await bot.answer_callback_query(callback.id)
    await bot.send_message(
        callback.from_user.id,
        f"–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {tax_type.upper()}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"
    )

@dp.message_handler(text="üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
async def doc_start(message: types.Message):
    await Form.waiting_doc_data.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ö–ª–∏–µ–Ω—Ç, –°—É–º–º–∞, –£—Å–ª—É–≥–∞</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>–û–û–û –†–æ–º–∞—à–∫–∞, 50000, –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</code>"
    )

@dp.message_handler(state=Form.waiting_doc_data)
async def process_doc(message: types.Message, state: FSMContext):
    try:
        data = [x.strip() for x in message.text.split(',')]
        if len(data) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            
        client, amount, service = data
        filename = await accountant.generate_document(
            "–î–æ–≥–æ–≤–æ—Ä",
            client=client,
            amount=float(amount),
            service=service
        )
        
        with open(filename, 'rb') as doc:
            await message.answer_document(
                doc,
                caption=f"‚úÖ –î–æ–≥–æ–≤–æ—Ä –¥–ª—è {client} –≥–æ—Ç–æ–≤!\n\n"
                       f"–£—Å–ª—É–≥–∞: {service}\n"
                       f"–°—É–º–º–∞: {float(amount):,.2f} ‚ÇΩ"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

@dp.message_handler(text="üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ò–ò")
async def ai_consult(message: types.Message):
    await Form.waiting_question.set()
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É-–ò–ò:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ö–∞–∫ —É—á–µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ù–î–°?\n"
        "‚Ä¢ –ö–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –£–°–ù —Å –û–°–ù–û?"
    )

@dp.message_handler(state=Form.waiting_question)
async def process_question(message: types.Message, state: FSMContext):
    await message.answer_chat_action("typing")
    
    try:
        # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        quick_responses = {
            "—Å—Ä–æ–∫ —É–ø–ª–∞—Ç—ã –Ω–¥—Å": "–î–æ 25 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (—Å—Ç. 174 –ù–ö –†–§)",
            "—Å—Ç–∞–≤–∫–∞ –Ω–¥—Ñ–ª": "13% –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤, 30% –¥–ª—è –Ω–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ (—Å—Ç. 224 –ù–ö –†–§)",
            "—É—Å–Ω": "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è (6% –∏–ª–∏ 15%) - –ù–ö –†–§ —Å—Ç. 346.12"
        }
        
        prompt_lower = message.text.lower()
        for question, answer in quick_responses.items():
            if question in prompt_lower:
                await message.answer(answer)
                return
                
        response = await accountant.ask_ai(message.text)
        await message.answer(response[:4000])
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

@dp.message_handler(text="üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
async def data_analysis_start(message: types.Message):
    await Form.waiting_excel.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

@dp.message_handler(content_types=['document'], state=Form.waiting_excel)
async def process_excel(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = f"temp_{datetime.now().strftime('%Y%m%d')}.xlsx"
        
        await message.document.download(destination_file=file_path)
        analysis = accountant.analyze_excel(file_path)
        
        response = (
            f"üìà <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {analysis['period']['start']} - {analysis['period']['end']}\n"
            f"üí∞ –î–æ—Ö–æ–¥—ã: {analysis['total_income']:,.2f} ‚ÇΩ\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {analysis['total_expenses']:,.2f} ‚ÇΩ\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            f"{analysis['tax_optimization']}"
        )
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    finally:
        await state.finish()
        if os.path.exists(file_path):
            os.remove(file_path)

async def on_shutdown(dp):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    await accountant.close()
    await bot.close()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_shutdown=on_shutdown)