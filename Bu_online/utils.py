import os
import aiohttp
import asyncio
import json
import hashlib
from datetime import datetime, timedelta
from docx import Document
from dotenv import load_dotenv
import pandas as pd
from pathlib import Path
import logging
from logging.handlers import RotatingFileHandler
from aiohttp import ClientTimeout, TCPConnector
from typing import Optional, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        'accountant.log',
        maxBytes=5*1024*1024,  # 5 MB
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

setup_logging()
logger = logging.getLogger(__name__)

load_dotenv()

class AIAccountantCore:
    """–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —è–¥—Ä–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å DeepSeek API"""
    
    def __init__(self):
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
        self.api_key = os.getenv("DEEPSEEK_API_KEY")
        self.session = None
        self.timeout = ClientTimeout(total=30, connect=10)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
        self.retries = 3
        self.backoff_base = 2
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –Ω–∞–ª–æ–≥–∞–º
        self.tax_knowledge = {
            "–£–°–ù": {
                "rate": 0.06,
                "deadline": "25 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞",
                "forms": ["–ö–ù–ò–î", "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –£–°–ù"]
            },
            "–£–°–ù15": {
                "rate": 0.15,
                "deadline": "25 —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞",
                "forms": ["–ö–ù–ò–î", "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –£–°–ù"]
            },
            "–ù–î–§–õ": {
                "rate": 0.13,
                "deadline": "15 –∏—é–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞",
                "forms": ["3-–ù–î–§–õ"]
            }
        }
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è fallback
        self.local_knowledge = {
            "—É—Å–Ω": {
                "response": (
                    "üìå –£–°–ù (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è):\n"
                    "‚Ä¢ –°—Ç–∞–≤–∫–∞: 6% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ 15% –æ—Ç (–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã)\n"
                    "‚Ä¢ –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å: –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –£–°–ù (–¥–æ 30 –∞–ø—Ä–µ–ª—è)\n"
                    "‚Ä¢ –£–ø–ª–∞—Ç–∞: –∞–≤–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ 25 —á–∏—Å–ª–∞\n"
                    "‚Ä¢ –ù–ü–ê: –ù–ö –†–§ —Å—Ç. 346.12-346.27"
                ),
                "keywords": ["—É—Å–Ω", "—É–ø—Ä–æ—â–µ–Ω"]
            },
            "–Ω–¥—Ñ–ª": {
                "response": (
                    "üìå –ù–î–§–õ (–Ω–∞–ª–æ–≥ –Ω–∞ –¥–æ—Ö–æ–¥—ã —Ñ–∏–∑–ª–∏—Ü):\n"
                    "‚Ä¢ –°—Ç–∞–≤–∫–∞: 13% (—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã), 30% (–Ω–µ—Ä–µ–∑–∏–¥–µ–Ω—Ç—ã)\n"
                    "‚Ä¢ –°—Ä–æ–∫ —É–ø–ª–∞—Ç—ã: –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 15 –∏—é–ª—è\n"
                    "‚Ä¢ –§–æ—Ä–º–∞: 3-–ù–î–§–õ\n"
                    "‚Ä¢ –ù–ü–ê: –ù–ö –†–§ —Å—Ç. 207-233"
                ),
                "keywords": ["–Ω–¥—Ñ–ª", "–ø–æ–¥–æ—Ö–æ–¥–Ω—ã–π"]
            }
        }

    async def ensure_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            connector = TCPConnector(
                limit=10,
                force_close=False,
                enable_cleanup_closed=True,
                ssl=False  # –û—Ç–∫–ª—é—á–∏—Ç—å SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            )
            self.session = aiohttp.ClientSession(
                connector=connector,
                timeout=self.timeout,
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "User-Agent": "AccountingBot/3.0",
                    "Accept": "application/json"
                }
            )

    async def ask_ai(self, prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self.ensure_session()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        local_response = self._get_local_response(prompt)
        if local_response:
            return local_response

        payload = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –§–æ—Ä–º–∞—Ç: 1) –°—É—Ç—å 2) –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ 3) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                },
                {
                    "role": "user",
                    "content": prompt[:2000]  # –õ–∏–º–∏—Ç –¥–ª–∏–Ω—ã
                }
            ],
            "temperature": 0.3,
            "max_tokens": 1000,
            "stream": False
        }

        last_error = None
        for attempt in range(self.retries):
            try:
                async with self.session.post(
                    self.api_url,
                    json=payload,
                    timeout=self.timeout
                ) as response:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    raw_response = await response.text()
                    logger.debug(f"API Response: {raw_response}")

                    if response.status != 200:
                        error_data = await response.json()
                        raise aiohttp.ClientError(
                            f"API Error {response.status}: {error_data.get('error', {}).get('message', 'Unknown error')}"
                        )

                    data = await response.json()
                    return data["choices"][0]["message"]["content"]

            except Exception as e:
                last_error = str(e)
                logger.error(f"Attempt {attempt+1} failed: {last_error}")
                if attempt == self.retries - 1:
                    return self._get_local_response(prompt) or f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {last_error}"
                await asyncio.sleep(self.backoff_base ** attempt)
        
        return self._get_local_response(prompt) or "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

    def _get_local_response(self, prompt: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        prompt_lower = prompt.lower()
        for topic in self.local_knowledge.values():
            if any(kw in prompt_lower for kw in topic["keywords"]):
                return topic["response"]
        return None

    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            await self.ensure_session()
            async with self.session.get(
                "https://api.deepseek.com/v1/models",
                timeout=ClientTimeout(total=5)
            ) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"Connection check failed: {str(e)}")
            return False

    def calculate_tax(self, income: float, system: str = "–£–°–ù", region: str = None) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤"""
        try:
            income = float(income)
            if system not in self.tax_knowledge:
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è")
                
            tax_info = self.tax_knowledge[system]
            tax = income * tax_info["rate"]
            
            result = {
                "system": system,
                "income": income,
                "rate": tax_info["rate"],
                "tax": tax,
                "deadline": tax_info["deadline"],
                "forms": tax_info.get("forms", [])
            }
            
            if region:
                result["notes"] = "–£—á—Ç–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"
                
            return result
            
        except Exception as e:
            logger.error(f"Tax calculation error: {str(e)}")
            raise

    async def generate_document(self, doc_type: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            if doc_type == "–î–æ–≥–æ–≤–æ—Ä":
                return await self._generate_contract(**kwargs)
            elif doc_type == "–ê–∫—Ç":
                return await self._generate_act(**kwargs)
            else:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        except Exception as e:
            logger.error(f"Document generation failed: {str(e)}")
            raise

    async def _generate_contract(self, client: str, amount: float, service: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"""
        doc = Document()
        
        # –®–∞–ø–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc.add_heading(f'–î–û–ì–û–í–û–† ‚Ññ {datetime.now().strftime("%Y%m%d")}', 0)
        doc.add_paragraph(f"–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}")
        doc.add_paragraph(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –û–û–û '–ë—É—Ö–ü—Ä–æ—Ñ–∏'")
        doc.add_paragraph(f"–ó–∞–∫–∞–∑—á–∏–∫: {client}")
        
        # –£—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
        doc.add_heading('1. –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞', level=1)
        doc.add_paragraph(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±—è–∑—É–µ—Ç—Å—è –æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏: {service}")
        
        doc.add_heading('2. –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥', level=1)
        doc.add_paragraph(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {amount:,.2f} —Ä—É–±. (–ù–î–° –Ω–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è)")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        os.makedirs("documents", exist_ok=True)
        filename = f"documents/–î–æ–≥–æ–≤–æ—Ä_{client}_{datetime.now().strftime('%Y%m%d')}.docx"
        doc.save(filename)
        
        return filename

    def analyze_excel(self, file_path: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = pd.read_excel(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_cols = ['–î–∞—Ç–∞', '–°—É–º–º–∞']
            missing = [col for col in required_cols if col not in df.columns]
            if missing:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
                
            df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'], errors='coerce')
            
            return {
                "period": {
                    "start": df['–î–∞—Ç–∞'].min().strftime('%d.%m.%Y'),
                    "end": df['–î–∞—Ç–∞'].max().strftime('%d.%m.%Y')
                },
                "total_income": df[df['–°—É–º–º–∞'] > 0]['–°—É–º–º–∞'].sum(),
                "total_expenses": abs(df[df['–°—É–º–º–∞'] < 0]['–°—É–º–º–∞'].sum()),
                "tax_optimization": self._get_tax_optimization(df)
            }
        except Exception as e:
            logger.error(f"Excel analysis error: {str(e)}")
            raise

    def _get_tax_optimization(self, df: pd.DataFrame) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤"""
        profit = df['–°—É–º–º–∞'].sum()
        if profit > 3000000:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –û–°–ù–û —Å –ù–î–°"
        elif profit > 1000000:
            return "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –£–°–ù 15% (–¥–æ—Ö–æ–¥—ã –º–∏–Ω—É—Å —Ä–∞—Å—Ö–æ–¥—ã)"
        else:
            return "–ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –£–°–ù 6% –∏–ª–∏ –ø–∞—Ç–µ–Ω—Ç"

    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()